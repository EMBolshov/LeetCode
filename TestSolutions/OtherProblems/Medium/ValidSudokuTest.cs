using FluentAssertions;
using LeetCode.OtherProblems.Medium;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestSolutions.OtherProblems.Medium
{
    [TestClass]
    public class ValidSudokuTest
    {
        [TestMethod]
        public void IsValidSudokuCase1()
        {
            var board = new [] {
                new [] {'5','3','.',  '.','7','.',  '.','.','.'},
                new [] {'6','.','.',  '1','9','5',  '.','.','.'},
                new [] {'.','9','8',  '.','.','.',  '.','6','.'},
                
                new [] {'8','.','.',  '.','6','.',  '.','.','3'},
                new [] {'4','.','.',  '8','.','3',  '.','.','1'},
                new [] {'7','.','.',  '.','2','.',  '.','.','6'},
                
                new [] {'.','6','.',  '.','.','.',  '2','8','.'},
                new [] {'.','.','.',  '4','1','9',  '.','.','5'},
                new [] {'.','.','.',  '.','8','.',  '.','7','9'}
            };

            ValidSudoku.IsValidSudoku(board).Should().BeTrue();
        }
        
        [TestMethod]
        public void IsValidSudokuCase2()
        {
            var board = new [] {
                new [] {'8','3','.',  '.','7','.',  '.','.','.'},
                new [] {'6','.','.',  '1','9','5',  '.','.','.'},
                new [] {'.','9','8',  '.','.','.',  '.','6','.'},
                
                new [] {'8','.','.',  '.','6','.',  '.','.','3'},
                new [] {'4','.','.',  '8','.','3',  '.','.','1'},
                new [] {'7','.','.',  '.','2','.',  '.','.','6'},
                
                new [] {'.','6','.',  '.','.','.',  '2','8','.'},
                new [] {'.','.','.',  '4','1','9',  '.','.','5'},
                new [] {'.','.','.',  '.','8','.',  '.','7','9'}
            };

            ValidSudoku.IsValidSudoku(board).Should().BeFalse();
        }
        
        [TestMethod]
        public void IsValidSudokuCase3()
        {
            var board = new [] {
                new [] {'9','3','.',  '.','7','.',  '.','.','.'},
                new [] {'6','.','.',  '1','9','5',  '.','.','.'},
                new [] {'.','9','8',  '.','.','.',  '.','6','.'},
                
                new [] {'8','.','.',  '.','6','.',  '.','.','3'},
                new [] {'4','.','.',  '8','.','3',  '.','.','1'},
                new [] {'7','.','.',  '.','2','.',  '.','.','6'},
                
                new [] {'.','6','.',  '.','.','.',  '2','8','.'},
                new [] {'.','.','.',  '4','1','9',  '.','.','5'},
                new [] {'.','.','.',  '.','8','.',  '.','7','9'}
            };

            ValidSudoku.IsValidSudoku(board).Should().BeFalse();
        }
        
        [TestMethod]
        public void IsValidSudokuCase4()
        {
            var board = new [] {
                new [] {'4','3','.',  '.','7','.',  '.','.','.'},
                new [] {'6','.','.',  '1','9','5',  '.','.','.'},
                new [] {'.','9','8',  '.','.','.',  '.','6','.'},
                
                new [] {'8','.','.',  '.','6','.',  '.','.','3'},
                new [] {'4','.','.',  '8','.','3',  '.','.','1'},
                new [] {'7','.','.',  '.','2','.',  '.','.','6'},
                
                new [] {'.','6','.',  '.','.','.',  '2','8','.'},
                new [] {'.','.','.',  '4','1','9',  '.','.','5'},
                new [] {'.','.','.',  '.','8','.',  '.','7','9'}
            };

            ValidSudoku.IsValidSudoku(board).Should().BeFalse();
        }
    }
}